.TH usm 1 "27 April 2012" "Version 1.0" "THE USER SOFTWARE MANAGER"
.SH NAME
.B usm 
\- The User Software Manager
.SH SYNOPSIS
.B usm
[command] [...]
.SH DESCRIPTION
Compiled software installed somewhere under the user's home directory is difficult to manage
\- often times, it is clumped into a single directory, like ~/bin; this makes it very messy
to remove self-compiled software, or even to know what is installed.
.PP
Enter the User Software Manager. Designed with ideas taken from GoboLinux, the USM keeps each
user compiled package in its own directory under ~/Apps. This allows users to see what they
have installed at a glance, quickly de-install software, and to build their own software.
.PP
USM works by creating a "staging" directory called ~/Apps/install. This is where all
prefixes should be set (for example, when using configure or make). When software is
done installing, just issue a "usm add foo foo-version" command to commit it to the
directory.
.PP
USM is able to keep everything in the user's PATH by installing a few lines in the user's
bash/zsh/etc. startup file. Not only is the user's PATH set there, any number of variables,
such as MANPATH, can be set in the same fashion.
.SH OPTIONS
.TP
usm help
Show a handy-dandy help page in case you forget anything.
.TP
usm init
Create an initial ~/Apps and asks you to add the configuration to your shell's startup script.
.TP
usm add <name> <version>
Commits whatever is in ~/Apps/local into ~/Apps/name--version.
.TP
usm ls [pattern]
Lists out all software matching. If pattern is missing, all installed software is listed.
.TP
usm del <pattern>
Search for packages to deinstall given the pattern prefix.
.SH AUTHOR
adamnew123456 <adamnew123456@gmail.com> and on GitHub
